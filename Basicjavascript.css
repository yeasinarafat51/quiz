Day 1:  Basic JavaScript & Problem Solving

JavaScript Fundamentals

/* // What are the different data types in JavaScript? */
answer
In JavaScript, data types are divided into primitive and non-primitive (reference) types:

Primitive Data Types
Number: Represents both integer and floating-point numbers. Examples: 5, 3.14.
String: Represents a sequence of characters. Strings are enclosed in quotes ('text', "text", or `text`).
Boolean: Holds either true or false values, often used in conditional logic.
Undefined: A variable that has been declared but not assigned a value has the value undefined.
Null: Represents an intentional absence of any object value. It is often used to reset or clear a variable.
Symbol (ES6): Represents unique identifiers and is primarily used to create unique object keys.
BigInt (ES2020): Allows the representation of integers beyond the safe limit of the Number type (greater than 
2
53
−
1
2 
53
 −1).
Non-Primitive (Reference) Data Types
Object: A complex data structure used to store collections of data and more complex entities. Objects are defined with curly braces { key: value }.
Array: A type of object used to store lists of values, accessible by index. Defined with square brackets [].
Function: Functions in JavaScript are treated as objects and can be assigned to variables, passed as arguments, or returned from other functions.
JavaScript is a dynamically typed language, so the type of a variable can change during runtime.






/* What is the difference between var, let, and const? */
answer:
In JavaScript, var, let, and const are keywords used to declare variables, but they have distinct behaviors:

1. var
Scope: var is function-scoped, meaning it is accessible within the function where it’s defined or globally if defined outside a function. It ignores block scope (e.g., within {}).
Hoisting: Variables declared with var are hoisted to the top of their scope, meaning they can be accessed before their declaration, though they will be undefined until initialized.
Redeclaration: You can redeclare variables with var without errors, which can lead to unintentional overwriting of values.
javascript
Copy code
function example() {
  console.log(x); // undefined due to hoisting
  var x = 10;
  console.log(x); // 10
}
2. let
Scope: let is block-scoped, meaning it is only accessible within the block {} where it’s declared, such as within loops or conditionals.
Hoisting: let is also hoisted, but unlike var, it is not initialized until the line of declaration (known as the "temporal dead zone"), so accessing it before declaration causes a ReferenceError.
Redeclaration: You cannot redeclare a variable with let within the same scope, which reduces errors due to accidental redeclaration.
javascript

if (true) {
  let y = 5;
  console.log(y); // 5
}
console.log(y); // ReferenceError: y is not defined
3. const
Scope: Like let, const is block-scoped.
Hoisting: It also has a temporal dead zone and behaves like let in terms of hoisting.
Immutability: Variables declared with const cannot be reassigned, though the properties of objects declared with const can still be modified.
Redeclaration: Like let, redeclaring a const variable in the same scope is not allowed.
javascript

const z = 10;
z = 20; // TypeError: Assignment to constant variable.
const obj = { name: 'Alice' };
obj.name = 'Bob'; // This works, as we’re modifying the property, not reassigning `obj`.
Summary
var: Function-scoped, hoisted, allows redeclaration.
let: Block-scoped, hoisted but with a temporal dead zone, no redeclaration.
const: Block-scoped, hoisted with temporal dead zone, no redeclaration, and cannot be reassigned.
In modern JavaScript, let and const are generally preferred over var due to their clearer scoping rules and to reduce unintended behaviors. Use const by default for values that won’t change and let for variables that will be reassigned.




/* Explain JavaScript's == vs. === operators. */

answer
In JavaScript, == and === are comparison operators used to check equality, but they function differently:

1. == (Loose Equality)
Type Coercion: The == operator compares two values for equality after attempting type conversion if the types are different.
Behavior: With ==, JavaScript tries to coerce the values to a common type before comparing them. For example:
javascript

5 == '5';      // true, because '5' is coerced to a number before comparison
null == undefined;  // true, as both are considered loosely equal in JavaScript
This makes == flexible but can lead to unexpected results due to automatic type conversion.

2. === (Strict Equality)
No Type Coercion: The === operator, often called "strict equality," compares both the values and types without any type conversion.
Behavior: For two values to be strictly equal, they must have the same type and the same value.
javascript

5 === '5';     // false, because they are of different types
null === undefined;  // false, because they are different types
Because === does not perform type conversion, it is generally considered safer and more predictable than ==, especially in larger codebases where implicit conversions can cause bugs.

When to Use Each
Use ===: It is generally recommended to use === to avoid unexpected type coercion, ensuring that both value and type match.
Use ==: In cases where type coercion is desired or acceptable, == can be used. However, this should be done carefully and with a good understanding of JavaScript’s type coercion rules.
In summary, == checks for loose equality with type coercion, while === checks for strict equality without type conversion.




/* What is type coercion in JavaScript? Give an example. */
answer
Type coercion in JavaScript is the automatic or implicit conversion of values from one data type to another. JavaScript performs type coercion when operators or functions expect a certain data type, but receive a different one. This behavior is common with == (loose equality) and arithmetic operations, where JavaScript attempts to coerce values to the same type for comparison or calculation.

Types of Type Coercion
Implicit Coercion: This happens automatically by JavaScript, often resulting in type conversions that the developer might not anticipate.
Explicit Coercion: This is when you, as a developer, manually convert a value from one type to another using functions or constructors like Number(), String(), etc.
Examples of Implicit Type Coercion
String Concatenation: When using + with a string and a number, JavaScript converts the number to a string and concatenates.

javascript

let result = '5' + 10;
console.log(result); // "510" (10 is converted to "10" and concatenated)
Loose Equality (==): When using ==, JavaScript attempts to coerce the values to the same type before comparing.

javascript

console.log(5 == '5'); // true (string '5' is converted to number 5)
Boolean Conversion: Certain values are coerced to true or false in a boolean context, such as in conditionals.

javascript

if ('') {
    console.log('This will not print because an empty string is falsy.');
}
if ('hello') {
    console.log('This will print because non-empty strings are truthy.');
}
Example of Explicit Type Coercion
You can explicitly convert values to a desired type using JavaScript functions:

javascript

let str = '123';
let num = Number(str);  // converts '123' to 123
Summary
Type coercion can make JavaScript flexible, but it can also lead to unexpected results. Using strict equality (===) and explicit conversions is generally safer to avoid issues with implicit type coercion.






/* Explain the concept of scope in JavaScript. */
answer
In JavaScript, scope refers to the context within which variables and functions are accessible and can be referenced. Scope determines the visibility and lifecycle of variables, helping to avoid conflicts between variable names in different parts of the code.

Types of Scope in JavaScript
Global Scope:

Variables declared outside of any function or block have a global scope. They can be accessed from anywhere in the code.
Global variables can lead to issues in larger applications if not managed carefully, as they are accessible throughout the program.
javascript

let globalVar = "I'm global";

function test() {
  console.log(globalVar); // Accessible here
}

test();
console.log(globalVar); // Also accessible here
Function Scope:

Variables declared within a function are function-scoped. They can only be accessed within that function, and not outside it.
Function scope is applicable to variables declared using var, let, or const.
javascript

function testFunction() {
  let functionScopedVar = "I'm function scoped";
  console.log(functionScopedVar); // Accessible here
}

testFunction();
console.log(functionScopedVar); // Error: not accessible here
Block Scope:

Block scope applies to variables declared with let or const within a pair of curly braces {} (like in loops, if statements, etc.).
Variables declared with let or const are only accessible within the block where they are defined.
javascript

if (true) {
  let blockScopedVar = "I'm block scoped";
  console.log(blockScopedVar); // Accessible here
}

console.log(blockScopedVar); // Error: not accessible here
Lexical Scope:

JavaScript follows lexical scoping, which means functions are scoped based on where they are declared in the code. A function has access to variables in its own scope as well as scopes it is nested within.
Inner functions can access variables in their outer functions, but not the other way around.
javascript

function outerFunction() {
  let outerVar = "I'm from the outer function";

  function innerFunction() {
    console.log(outerVar); // Accessible due to lexical scoping
  }

  innerFunction();
}

outerFunction();
Summary
Global scope is accessible everywhere, function scope is limited to functions, and block scope is limited to specific blocks (using let and const).
Lexical scoping allows inner functions to access outer scope variables based on where they are declared.
Using scopes correctly improves modularity, security, and maintainability of the code by limiting the visibility of variables where needed.



/* What is hoisting in JavaScript? */
answer
In JavaScript, hoisting is a behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. This allows variables and functions to be used before they are declared in the code, though this can lead to unexpected behavior if not fully understood.

How Hoisting Works
Function Declarations: Entire function declarations are hoisted to the top of their scope. This allows functions to be called before their declaration in the code.

javascript

myFunction(); // Works due to hoisting

function myFunction() {
  console.log("Hello from the function!");
}
Variable Declarations: For variables declared with var, only the declaration (not the initialization) is hoisted to the top of the scope. This results in the variable being undefined if accessed before initialization.

javascript

console.log(myVar); // undefined (declaration is hoisted, but not the initialization)
var myVar = 5;
console.log(myVar); // 5
For variables declared with let and const, hoisting still occurs, but they are placed in a Temporal Dead Zone (TDZ), which means accessing them before declaration will result in a ReferenceError.

javascript

console.log(myLetVar); // ReferenceError: Cannot access 'myLetVar' before initialization
let myLetVar = 10;
Why Hoisting Matters
Understanding hoisting can help avoid bugs related to undefined variables or misordered function calls. This behavior is unique to JavaScript, and it emphasizes the importance of declaring variables and functions at the beginning of their scope to avoid confusion.

In summary, hoisting allows JavaScript to "move" declarations to the top of their scope, but only fully hoists functions and var declarations, not the initializations for var or any part of let and const.




/* What are template literals, and how are they used? */
In JavaScript, template literals are a way to create strings that offer more flexibility than traditional strings created with single or double quotes. Template literals are enclosed by backticks ` and allow for embedded expressions, multiline strings, and string interpolation.

Features of Template Literals
String Interpolation:

Template literals allow you to insert variables and expressions directly within a string using ${} syntax.
javascript

const name = "Alice";
const greeting = `Hello, ${name}!`;
console.log(greeting); // Outputs: Hello, Alice!
Multiline Strings:

With template literals, you can create multiline strings easily without needing to use newline characters (\n).
javascript

const message = `This is a 
multiline 
string.`;
console.log(message);
Expression Embedding:

You can include JavaScript expressions within ${} placeholders, which will be evaluated and included in the string.
javascript

const a = 5;
const b = 10;
const result = `The sum of a and b is ${a + b}`;
console.log(result); // Outputs: The sum of a and b is 15
Tagged Templates:

Tagged templates allow you to process template literals with a function. This can be used for custom formatting, sanitizing, or other processing needs.
javascript

function highlight(strings, ...values) {
  return strings[0] + values.map(value => `**${value}**`).join(strings[1]);
}

const result = highlight`This is a ${"tagged"} template literal`;
console.log(result); // Outputs: This is a **tagged** template literal
Benefits of Template Literals
Readable Code: String interpolation makes it easier to build strings dynamically.
Enhanced Formatting: Multiline strings and embedded expressions improve readability, especially for complex strings.
Flexibility with Tagged Templates: They allow for more complex processing, useful in cases like internationalization, custom formatting, or security checks.
In summary, template literals are a powerful and flexible way to handle strings in JavaScript, enabling more readable and maintainable code through features like interpolation, multiline formatting, and tagged templates.






/* - **Explain what a higher-order function is in JavaScript.** */
1. Higher-Order Functions
A higher-order function in JavaScript is a function that either:

Takes other functions as arguments, or
Returns a function as its result.
These functions enable more flexible and modular code by allowing functions to operate on other functions, making them a core concept in functional programming. Common examples of higher-order functions in JavaScript include map, filter, and reduce:

javascript

const numbers = [1, 2, 3, 4];
const doubled = numbers.map(num => num * 2); // 'map' takes a function as an argument
console.log(doubled); // [2, 4, 6, 8]
Higher-order functions are useful for abstracting behavior, managing complexity, and writing reusable code.








/* - **What are arrow functions, and how are they different from regular functions?** */

Arrow Functions
Arrow functions are a shorter syntax for writing functions in JavaScript, introduced in ES6. They are defined using the => syntax and differ from regular functions in several ways:

Concise Syntax: Arrow functions allow you to skip the function keyword and braces for single-line functions.
Lexical this Binding: Unlike regular functions, arrow functions do not have their own this context. They inherit this from their surrounding lexical scope, which makes them useful in cases where you need this to refer to the outer context (such as in object methods or callbacks).
No arguments Object: Arrow functions do not have their own arguments object.
javascript

// Regular function
const add = function(x, y) {
  return x + y;
};

// Arrow function
const addArrow = (x, y) => x + y;
Arrow functions are not suitable for all situations, such as defining methods in objects (since this will not refer to the object itself).







/* - **What is an Immediately Invoked Function Expression (IIFE)?** */
Immediately Invoked Function Expression (IIFE)
An Immediately Invoked Function Expression (IIFE) is a JavaScript function that is defined and executed immediately after it is created. The syntax involves wrapping a function in parentheses and then invoking it right away. IIFEs are often used to create a private scope and avoid polluting the global namespace, especially in older JavaScript before let and const introduced block-scoping.

javascript

(function() {
  const message = "Hello from IIFE";
  console.log(message);
})(); // This function runs immediately
By creating a private scope, IIFEs help to prevent variable name conflicts in larger codebases. They are frequently used in JavaScript patterns and libraries for encapsulation.





/* Functions and Objects */

/* - **Explain the concept of closures in JavaScript.** */
Closures
A closure in JavaScript is a feature where an inner function retains access to variables in its outer (enclosing) function even after the outer function has finished executing. This allows functions to have "private" variables and enables functional programming techniques such as data hiding and currying.

javascript

function outer() {
  const outerVar = "I'm an outer variable";
  return function inner() {
    console.log(outerVar);
  };
}
const closureFunc = outer();
closureFunc(); // Outputs: "I'm an outer variable"
Closures are essential for creating function factories, module patterns, and maintaining state in JavaScript.



/* - **What is the `this` keyword, and how does it behave in different contexts?** */
The this Keyword
The this keyword refers to the context in which a function is invoked, and its value changes based on how the function is called:

Global Context: In the global scope, this refers to the window object (or global in Node.js).
Object Method: When a function is called as a method on an object, this refers to that object.
Constructor Function: Inside a constructor, this refers to the new instance created by the constructor.
Arrow Functions: Arrow functions don’t have their own this context; they inherit this from the surrounding lexical scope.
javascript

const obj = {
  name: "Alice",
  getName: function() {
    return this.name;
  }
};
console.log(obj.getName()); // "Alice"





/* - **How do you create an object in JavaScript?** */
Creating Objects in JavaScript
There are multiple ways to create an object in JavaScript:

Object Literal: const obj = { key: "value" };
Constructor Function: function Person(name) { this.name = name; } const person = new Person("Alice");
Object.create(): Creates a new object with a specified prototype.
class Syntax: ES6 introduced classes for a cleaner object-oriented approach.




/* - **What is the difference between `null` and `undefined`?** */
null vs undefined
undefined: Represents a variable that has been declared but not assigned a value.
null: Represents the intentional absence of any object value. It’s an assignment value, often used to reset variables.
javascript

let a;
console.log(a); // undefined
let b = null;
console.log(b); // null




/* - **How do you copy an object in JavaScript? Explain shallow vs. deep copy.** */
Copying Objects: Shallow vs. Deep Copy
Shallow Copy: Copies the top-level properties, but if the object contains other objects, only the references are copied (e.g., using Object.assign() or the spread operator { ...obj }).
Deep Copy: Creates a copy of the object and all nested objects, eliminating reference issues. Deep copies can be done with libraries (like Lodash's _.cloneDeep) or by custom recursive functions.
javascript

const original = { a: 1, b: { c: 2 } };
const shallowCopy = { ...original };
shallowCopy.b.c = 3;
console.log(original.b.c); // 3 (affected by changes in the shallow copy)





/* - **Explain how `call`, `apply`, and `bind` work in JavaScript.** */
call, apply, and bind
These methods are used to explicitly set the value of this in functions.

call: Invokes a function with a specified this value and arguments passed individually.
apply: Similar to call, but takes arguments as an array.
bind: Creates a new function with a bound this value that can be called later.
javascript

function greet(greeting) {
  console.log(`${greeting}, ${this.name}`);
}
const person = { name: "Alice" };
greet.call(person, "Hello"); // "Hello, Alice"
greet.apply(person, ["Hi"]); // "Hi, Alice"
const boundGreet = greet.bind(person);
boundGreet("Hey"); // "Hey, Alice"




/* - **What is the prototype chain, and how does inheritance work in JavaScript?** */
Prototype Chain and Inheritance
In JavaScript, objects inherit properties from their prototype, forming a prototype chain. Each object has a prototype, and if a property or method isn’t found in an object, JavaScript will look up the chain to find it. The root of this chain is Object.prototype, and inheritance occurs when an object or class uses prototypes to gain the properties of another.

javascript

function Animal(name) {
  this.name = name;
}
Animal.prototype.speak = function() {
  console.log(`${this.name} makes a noise.`);
};
const dog = new Animal("Dog");
dog.speak(); // "Dog makes a noise."
Prototype-based inheritance is unique to JavaScript, allowing for more flexible and dynamic inheritance patterns compared to traditional class-based languages.


