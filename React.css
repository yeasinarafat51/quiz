/* Basic Interview Questions Of React :  */

/* React কী, এবং কেন এটি ব্যবহৃত হয়? */
React একটি জাভাস্ক্রিপ্ট লাইব্রেরি যা ইউজার ইন্টারফেস তৈরি করতে ব্যবহৃত হয়। এটি মূলত ফেসবুক দ্বারা তৈরি করা হয়েছে এবং এক পৃষ্ঠার অ্যাপ্লিকেশন (SPA) এবং মোবাইল অ্যাপ্লিকেশন ডেভেলপমেন্টে জনপ্রিয়। React-এ কম্পোনেন্ট ভিত্তিক আর্কিটেকচার রয়েছে, যার মাধ্যমে রিইউজেবল UI কম্পোনেন্ট তৈরি করা সহজ হয়।

/* JSX কী, এবং React-এ এটি কেন ব্যবহৃত হয়? */
JSX (JavaScript XML) হ'ল একটি সিনট্যাক্স এক্সটেনশন যা জাভাস্ক্রিপ্টে XML বা HTML-এর মতো ট্যাগ ব্যবহার করতে দেয়। এটি React-এ কোড লেখা সহজ এবং পরিষ্কার করে, কারণ আপনি HTML-এর মতো দেখতে কোড সরাসরি জাভাস্ক্রিপ্টে লিখতে পারেন।

/* JSX কিভাবে HTML থেকে আলাদা? */
JSX-এ কিছু কাস্টম বৈশিষ্ট্য থাকে, যেমন class এর পরিবর্তে className ব্যবহার করতে হয়, এবং onclick এর পরিবর্তে onClick ইত্যাদি। JSX আসলে ব্রাউজার-কম্প্যাটিবল জাভাস্ক্রিপ্টে ট্রান্সপাইল হয়।

/* React-এ কম্পোনেন্ট কী? */
কম্পোনেন্ট হল ছোট ছোট পুনরায় ব্যবহারযোগ্য UI অংশ যা একত্রে কাজ করে একটি বড় ইন্টারফেস তৈরি করে। React-এ দুটি কম্পোনেন্টের ধরন রয়েছে: ক্লাস কম্পোনেন্ট এবং ফাংশনাল কম্পোনেন্ট।

/* ফাংশনাল এবং ক্লাস কম্পোনেন্টের মধ্যে পার্থক্য কী? */
ফাংশনাল কম্পোনেন্ট হল সাধারণ ফাংশন যা props গ্রহণ করে এবং UI রিটার্ন করে।
ক্লাস কম্পোনেন্ট ক্লাস দিয়ে ডিফাইন করা হয় এবং এতে স্টেট এবং লাইফসাইকেল মেথড থাকে।
একটি সিঙ্গেল-পেজ অ্যাপ্লিকেশন (SPA) কী, এবং React কীভাবে এটি সক্ষম করে?
SPA হল এমন একটি অ্যাপ্লিকেশন যা একবার লোড হওয়ার পর নতুন পৃষ্ঠা লোড না করেই একাধিক UI দেখায়। React-এ ক্লায়েন্ট-সাইড রাউটিং ব্যবহার করা হয়, যা পৃষ্ঠাগুলোর মধ্যে নেভিগেট করার সময় পুরো পৃষ্ঠা রিলোড ছাড়াই দ্রুত UI আপডেট করতে দেয়।

/* React-এ props কী? */
props হল এমন ডেটা যা একটি কম্পোনেন্টে এক্সটার্নাল সোর্স থেকে আসে, যা সাধারণত parent কম্পোনেন্ট থেকে child কম্পোনেন্টে পাঠানো হয়। এটি immutable, অর্থাৎ props পরিবর্তন করা যায় না।

/* স্টেট এবং props-এর মধ্যে পার্থক্য কী? */
props: বাহ্যিক ডেটা যা parent থেকে child-এ পাঠানো হয় এবং পরিবর্তন করা যায় না।
স্টেট: একটি কম্পোনেন্টের নিজস্ব ডেটা যা সেই কম্পোনেন্ট নিজেই পরিবর্তন করতে পারে।
কিভাবে React-এ একটি কম্পোনেন্ট থেকে অন্য কম্পোনেন্টে ডেটা পাঠাবেন?
props ব্যবহার করে parent কম্পোনেন্ট থেকে child কম্পোনেন্টে ডেটা পাঠানো যায়। যদি child থেকে parent-এ ডেটা পাঠাতে হয়, তাহলে parent কম্পোনেন্টে একটি ফাংশন তৈরি করে সেটি child-এ props হিসেবে পাঠানো যায়।

/* lists-এ key prop-এর গুরুত্ব কী? */
key React-কে প্রতিটি আইটেমকে অনন্যভাবে চিহ্নিত করতে সাহায্য করে, যা লিস্ট রেন্ডারিংয়ের পারফরম্যান্স বাড়ায় এবং লিস্টে পরিবর্তন ঘটলে UI সঠিকভাবে আপডেট করে।

/* React-এ ইভেন্ট হ্যান্ডেলিং কিভাবে করা হয়? */
React-এ ইভেন্ট হ্যান্ডলিংয়ে ক্যামেলকেস নেমিং কনভেনশন ব্যবহার করা হয়, যেমন onClick, onChange। জাভাস্ক্রিপ্ট ফাংশন গুলি ইভেন্টের রেসপন্স হিসেবে কল করা হয়।

/* React-এ controlled এবং uncontrolled কম্পোনেন্ট কী? */
Controlled Component: ইনপুট ফিল্ডের মান state দ্বারা নিয়ন্ত্রিত হয়।
Uncontrolled Component: ইনপুট ফিল্ডের মান সরাসরি DOM-এর উপর ভিত্তি করে নিয়ন্ত্রিত হয়।
React Fragment কী, এবং এটি কেন ব্যবহৃত হয়?
React Fragment হল একটি wrapper যা DOM-এ কোনো অতিরিক্ত নোড না যোগ করেই একাধিক child কম্পোনেন্ট গ্রুপ করতে দেয়।

/* React-এ কীভাবে conditional rendering করবেন? */
React-এ টেরনারি অপারেটর বা && ব্যবহার করে conditionally কোনো UI উপাদান রেন্ডার করা যায়।

/* React Hooks কী? সাধারণত ব্যবহৃত কিছু হুকের নাম বলুন। */
React Hooks ফাংশনাল কম্পোনেন্টে স্টেট এবং লাইফসাইকেল মেথড ব্যবহার করার একটি উপায়। কিছু সাধারণ হুক:

useState: স্টেট ম্যানেজ করতে।
useEffect: সাইড এফেক্ট পরিচালনার জন্য।
useContext: কনটেক্সট API ব্যবহার করতে।




/* Intermediate Interview Questions Of React:  */


/* useState Hook কীভাবে কাজ করে? */
useState Hook React-এ স্টেট পরিচালনা করতে ব্যবহৃত হয়। এটি একটি আর্রে রিটার্ন করে, যেখানে প্রথম আইটেমটি হল স্টেট ভ্যালু এবং দ্বিতীয়টি হল একটি ফাংশন যা সেই স্টেট আপডেট করে। useState কল করার সময় প্রাথমিক স্টেট মান সেট করতে হয়, এবং যখন প্রয়োজন হবে তখন সেই মান পরিবর্তন করা যাবে।

উদাহরণ:

javascript

const [count, setCount] = useState(0);
এখানে count হল স্টেট এবং setCount হল স্টেট আপডেট ফাংশন।

/* useEffect Hook কীভাবে কাজ করে? */
useEffect Hook এমন একটি Hook যা সাইড এফেক্ট পরিচালনার জন্য ব্যবহৃত হয়। এটি DOM আপডেটের পর বা নির্দিষ্ট স্টেটের পরিবর্তনে কোড চালাতে দেয়। useEffect দ্বিতীয় প্যারামিটার হিসেবে একটি ডিপেনডেন্সি আর্রে গ্রহণ করে, যেখানে নির্দিষ্ট স্টেট বা প্রপস উল্লেখ করা যায় যেগুলো পরিবর্তিত হলে useEffect ট্রিগার হবে।

উদাহরণ:

javascript

useEffect(() => {
    console.log("Component Mounted");
}, []);


/* React-এ কিভাবে API কল করবেন? */
React-এ API কল করার জন্য সাধারণত useEffect হুক ব্যবহার করা হয়, যা কম্পোনেন্ট মাউন্ট হলে একবার চালায়। API কল করার জন্য fetch বা axios লাইব্রেরি ব্যবহৃত হয়।

javascript

useEffect(() => {
    fetch('https://api.example.com/data')
        .then(response => response.json())
        .then(data => setData(data))
        .catch(error => console.error('Error:', error));
}, []);
/* Higher-Order Components (HOCs) কী? উদাহরণ দিন। */
Higher-Order Component (HOC) হল এমন একটি ফাংশন যা কম্পোনেন্টকে আর্গুমেন্ট হিসেবে গ্রহণ করে এবং একটি নতুন কম্পোনেন্ট রিটার্ন করে। এটি কোড পুনরায় ব্যবহার করতে সাহায্য করে।

উদাহরণ:

javascript

function withLogger(WrappedComponent) {
    return function EnhancedComponent(props) {
        console.log("Rendering", WrappedComponent.name);
        return <WrappedComponent {...props} />;
    };
}
/* React Context API-এর ব্যবহার কী? */
Context API React-এ গ্লোবাল ডেটা শেয়ার করার জন্য ব্যবহৃত হয়। এটি props-drilling এড়াতে সাহায্য করে এবং স্টেট বা ফাংশন সরাসরি parent থেকে child কম্পোনেন্টে পাঠায়।

/* Context API এবং props drilling-এর মধ্যে পার্থক্য কী? */
Context API ডেটা সরাসরি parent থেকে child এ পাঠাতে দেয়, ফলে props drilling এড়ানো যায়। অন্যদিকে props drilling-এ ডেটা একাধিক স্তর পেরিয়ে child-এ পৌঁছানো হয়।

/* React-এ refs কী এবং কখন এটি ব্যবহার করবেন? */
refs হল এমন একটি উপায় যার মাধ্যমে React কম্পোনেন্ট সরাসরি DOM এলিমেন্ট অ্যাক্সেস করতে পারে। এটি সাধারণত ইনপুট ফোকাস সেট করা, মিডিয়া প্লে/পজ করতে এবং DOM ম্যানিপুলেশনের জন্য ব্যবহার করা হয়।

/* useRef Hook-এর ব্যবহার কী এবং createRef থেকে কিভাবে আলাদা? */
useRef ফাংশনাল কম্পোনেন্টে স্টেটলেস রেফারেন্স তৈরি করে এবং এটি createRef থেকে আলাদা, কারণ useRef সবসময় একই অবজেক্ট রিটার্ন করে, যেখানে createRef প্রতিবার নতুন রেফারেন্স রিটার্ন করে।

/* React.memo-এর উদ্দেশ্য কী? */
React.memo একটি Higher-Order Component (HOC) যা কম্পোনেন্ট রিরেন্ডারিং অপ্টিমাইজ করতে ব্যবহৃত হয়। এটি props পরিবর্তন না হলে কম্পোনেন্টকে পুনরায় রেন্ডার হওয়া থেকে বিরত রাখে।

/* React lifecycle methods কী? */
React lifecycle হল বিভিন্ন পর্যায় বা মেথড যা একটি কম্পোনেন্ট জীবনের বিভিন্ন পর্যায়ে আসে। এই মেথডগুলো ক্লাস কম্পোনেন্টে স্টেট পরিবর্তন বা API কল করার জন্য ব্যবহৃত হয়।

/* componentDidMount এবং componentWillUnmount কী এবং কবে ব্যবহৃত হয়? */
componentDidMount: কম্পোনেন্ট মাউন্ট হওয়ার পর একবার কল হয়। API কল, DOM ম্যানিপুলেশন ইত্যাদির জন্য ব্যবহৃত হয়।
componentWillUnmount: কম্পোনেন্ট রিমুভ হওয়ার আগে একবার কল হয়। ক্লিনআপ অপারেশনের জন্য ব্যবহৃত হয়।
/* useCallback Hook কী এবং কেন এটি প্রয়োজনীয়? */
useCallback একটি ফাংশনের মেমোইজড ভার্সন রিটার্ন করে, যা প্রতিবার রেন্ডারিংয়ের সময় পুনরায় তৈরি হয় না। এটি রেন্ডারিং অপ্টিমাইজেশন বাড়ায়।

উদাহরণ:

javascript

const memoizedCallback = useCallback(() => {
    doSomething(a, b);
}, [a, b]);
React-এ useMemo Hook কীভাবে ব্যবহৃত হয়?
useMemo নির্দিষ্ট ক্যালকুলেটেড ভ্যালু মেমোইজ করে। এটি ডিপেনডেন্সি পরিবর্তন না হলে পুনরায় ক্যালকুলেশন এড়ায়, ফলে পারফরম্যান্স উন্নত হয়।

/* ফর্মে controlled কম্পোনেন্ট কী? */
Controlled Component-এ ইনপুট ভ্যালু React স্টেটে সংরক্ষিত হয়। এটি সরাসরি DOM এর উপর নির্ভর না করে React-এর স্টেটের উপর নির্ভর করে ইনপুট হ্যান্ডেল করে।





/* React Router Questions: */



/* React Router কী এবং এটি কেন ব্যবহৃত হয়? */
React Router হলো একটি লাইব্রেরি যা React অ্যাপ্লিকেশনে রাউটিং পরিচালনা করতে ব্যবহৃত হয়। এটি ব্যবহার করে ডেভেলপাররা একাধিক পৃষ্ঠা তৈরি করতে পারে, যেখানে বিভিন্ন URL-এ বিভিন্ন কম্পোনেন্ট বা ভিউ রেন্ডার করতে পারে। এটি single-page application (SPA) এর জন্য প্রয়োজনীয়, কারণ SPA-তে পেজ লোড না করে কনটেন্ট পরিবর্তন করা হয়, যা React Router সহজ করে দেয়।

/* BrowserRouter, HashRouter, এবং MemoryRouter-এর মধ্যে পার্থক্য */
BrowserRouter: এটি সাধারণত ব্যবহার করা হয় এবং HTML5 history API ব্যবহার করে। এটি URL-এ সুন্দর ও SEO-বান্ধব রাউট তৈরি করে।

HashRouter: এখানে URL এর সাথে # (হ্যাশ) সাইন যোগ করা হয় (যেমন example.com/#/home), যা SEO-তে সীমাবদ্ধতা আনতে পারে। এটি প্রধানত অপ্রচলিত ব্রাউজার যেখানে BrowserRouter কাজ করে না সেখানে ব্যবহৃত হয়।

MemoryRouter: এটি URL-এ ট্র্যাক রাখে না এবং ইন-মেমোরি রাউট ব্যবহার করে। এটি সাধারণত টেস্টিং বা নেস্টেড রাউট ব্যবহারের জন্য উপযোগী।

/* React-এ নেভিগেশন কিভাবে পরিচালনা করবেন? */
React-এ নেভিগেশন করার জন্য Link এবং NavLink উপাদান ব্যবহার করা হয়। Link কম্পোনেন্ট পেজ রিলোড ছাড়াই বিভিন্ন রাউটে যাওয়ার জন্য ব্যবহৃত হয়, আর NavLink ব্যবহার করে সক্রিয় (active) লিঙ্কগুলো আলাদাভাবে স্টাইল করা যায়।

উদাহরণ:

javascript

<Link to="/home">Home</Link>
<NavLink to="/about" activeClassName="active">About</NavLink>




/* React Router-এ Switch এবং Route এর ব্যবহার কী? */
Switch: একাধিক রাউটের মধ্যে একটিমাত্র রাউট মিলে গেলে সেটি রেন্ডার করে এবং বাকি রাউটগুলো এড়িয়ে যায়।

Route: এটি নির্দিষ্ট পথ (path) এর সাথে কম্পোনেন্ট মেলায় এবং সেই কম্পোনেন্ট রেন্ডার করে।

উদাহরণ:

javascript

<Switch>
  <Route path="/home" component={Home} />
  <Route path="/about" component={About} />
</Switch>




/* React Router-এ ডায়নামিক রাউট কীভাবে ব্যবহার করবেন? */
ডায়নামিক রাউট ব্যবহার করতে Route-এর path-এ প্যারামিটার যোগ করা হয়। প্যারামিটারগুলি
হিসেবে উল্লেখ করা হয়, যা নির্দিষ্ট মান দ্বারা প্রতিস্থাপিত হবে।

উদাহরণ:

javascript

<Route path="/profile/:userId" component={Profile} />



/* useParams Hook-এর উদ্দেশ্য কী? */
useParams Hook ব্যবহার করে ডায়নামিক রাউট প্যারামিটার অ্যাক্সেস করা যায়। এটি URL-এ প্রেরিত প্যারামিটারগুলি অবজেক্ট আকারে প্রদান করে, যেগুলি বিভিন্ন কাজের জন্য ব্যবহার করা যায়।

উদাহরণ:

javascript

import { useParams } from "react-router-dom";

function Profile() {
  const { userId } = useParams();
  return <h1>User ID: {userId}</h1>;
}
এভাবে, React Router ব্যবহার করে সহজেই একটি পূর্ণাঙ্গ SPA গঠন করা যায়।





/* Advanced Interview Questions Of React */


React portals কী এবং কবে এটি ব্যবহার করবেন?
React portals DOM-এর বাইরের কোনো জায়গায় একটি কম্পোনেন্ট রেন্ডার করতে ব্যবহার করা হয়। সাধারণত, মডাল, টুলটিপ, ডায়ালগ ইত্যাদি ব্যবহার করার সময় Portals ব্যবহৃত হয়, কারণ এই উপাদানগুলো মূল DOM গঠন থেকে আলাদা রাখা উচিত।

ব্যবহার উদাহরণ:

javascript

ReactDOM.createPortal(<Modal />, document.getElementById("modal-root"));



কোড-স্প্লিটিং কী, এবং React-এ এটি কিভাবে বাস্তবায়ন করবেন?
কোড-স্প্লিটিং হলো বড় অ্যাপ্লিকেশনের কোডকে ছোট ছোট টুকরোতে ভাগ করা, যাতে প্রয়োজন অনুসারে লোড করা যায়। এটি React.lazy এবং React Suspense ব্যবহার করে বাস্তবায়ন করা হয়।

উদাহরণ:

javascript

const OtherComponent = React.lazy(() => import('./OtherComponent'));


/* লেজি লোডিং কী এবং এটি React-এ কিভাবে বাস্তবায়ন করবেন? */
লেজি লোডিং হলো কোড-স্প্লিটিংয়ের মাধ্যমে শুধুমাত্র প্রয়োজন অনুযায়ী নির্দিষ্ট কম্পোনেন্ট লোড করা। React-এ React.lazy এবং Suspense ব্যবহার করে এটি সম্ভব।

/* Concurrent Mode কী, এবং এর সুবিধা কী কী? */
Concurrent Mode React-এ ব্যবহারকারীর ইনপুটের সাড়া দ্রুত দিতে এবং অ্যাপের পারফরম্যান্স উন্নত করতে ব্যবহৃত হয়। এটি ব্যাকগ্রাউন্ডে কাজগুলো সম্পন্ন করে দ্রুততার সাথে UI আপডেট করতে সাহায্য করে।

/* Error Boundaries কিভাবে বাস্তবায়ন করবেন? */
Error Boundaries হলো এমন এক বিশেষ কম্পোনেন্ট যা একটি কম্পোনেন্টে JavaScript error ধরা পরলে UI-টি ক্র্যাশ করা থেকে রক্ষা করে। এটি componentDidCatch এবং getDerivedStateFromError ব্যবহার করে তৈরি করা যায়।

/* Client-Side Rendering (CSR) এবং Server-Side Rendering (SSR)-এর পার্থক্য কী? */
CSR মানে ব্রাউজারে সম্পূর্ণ অ্যাপ রেন্ডার হওয়া, যেখানে SSR মানে সার্ভারেই HTML প্রস্তুত হয় এবং তারপর ব্রাউজারে পাঠানো হয়। SSR SEO-তে ভালো ফলাফল দেয় এবং পেজ লোডিং সময় কমায়।

/* React-এ Server-Side Rendering (SSR) কী এবং এটি কিভাবে কাজ করে? */
SSR-এ HTML পেজটি সার্ভারেই রেন্ডার হয়ে তৈরি হয় এবং তারপর ব্রাউজারে পাঠানো হয়। Next.js এ এই সুবিধা সহজে পাওয়া যায়।

/* Next.js কীভাবে SSR এবং স্ট্যাটিক জেনারেশন উন্নত করে? */
Next.js React অ্যাপ্লিকেশনে স্বয়ংক্রিয় SSR এবং স্ট্যাটিক ফাইল জেনারেশন করে অ্যাপের লোডিং টাইম কমায় এবং SEO পারফরম্যান্স বাড়ায়।

/* Next.js ব্যবহার করার সুবিধা কী কী? */
Next.js পারফরম্যান্স, SEO উন্নতি, এবং SSR সহজ করে তোলে। এটি আরও সহজ ডিরেক্টরি গঠন এবং রাউটিং সুবিধা প্রদান করে।

/* React Suspense এবং Concurrent Mode কী? */
Suspense ডাটা লোডের সময় fallback প্রদান করতে ব্যবহৃত হয়। Concurrent Mode অ্যাপের পারফরম্যান্স বাড়ায়।

/* Suspense ব্যবহার করে অ্যাসিঙ্ক্রোনাস ডাটা কিভাবে পরিচালনা করবেন? */
Suspense-এর মাধ্যমে fallback UI দেখানো যায় যতক্ষণ না ডাটা লোড হয়।

/* Custom hooks কী এবং কেন ব্যবহার করবেন? */
Custom Hooks এমন ফাংশন যা React Hooks ব্যবহার করে সাধারণ লজিক পুনঃব্যবহারযোগ্য করে তোলে।

/* একটি বড় React প্রকল্পের স্ট্রাকচারিংয়ের জন্য সেরা পদ্ধতি কী? */
কম্পোনেন্ট-ভিত্তিক স্ট্রাকচার, সুনির্দিষ্ট ফোল্ডার নামকরণ, এবং সহজে নেভিগেবল স্ট্রাকচার বজায় রাখা গুরুত্বপূর্ণ।

/* Virtual DOM কিভাবে কাজ করে? */
React Virtual DOM ব্যবহার করে মূল DOM আপডেটের আগে কম্পোনেন্টের পরিবর্তনগুলো পরীক্ষা করে, যা পারফরম্যান্স উন্নত করে।

/* React-এর Reconciliation Algorithm কীভাবে কাজ করে? */
React নতুন Virtual DOM এর সাথে আগেরটা তুলনা করে শুধুমাত্র পরিবর্তিত অংশগুলি আপডেট করে।

/* React.StrictMode কী এবং এর উদ্দেশ্য কী? */
StrictMode React-এর উন্নত ব্যবহার নিশ্চিত করে এবং অপ্রচলিত API গুলোকে চিনতে সাহায্য করে।

/* React-এ অপ্রয়োজনীয় রি-রেন্ডার কীভাবে এড়াবেন? */
React.memo, useCallback এবং useMemo এর মাধ্যমে অপ্রয়োজনীয় রি-রেন্ডার এড়ানো যায়।

/* React-এ debounce বা throttle কিভাবে করবেন? */
ডিবাউন্স এবং থ্রোটল করতে lodash বা নিজস্ব debounce ফাংশন ব্যবহার করা যেতে পারে।

/* Prop types কী এবং কেন ব্যবহার করা হয়? */
Prop types এর মাধ্যমে কম্পোনেন্টে আসা ডাটা প্রপার ফরম্যাটে আছে কিনা তা যাচাই করা যায়।

/* React অ্যাপে সাইড ইফেক্ট কিভাবে ম্যানেজ করবেন? */
useEffect Hook ব্যবহার করে সাইড ইফেক্ট যেমন ডাটা ফেচিং ম্যানেজ করা হয়।

/* useReducer Hook কীভাবে কাজ করে এবং কখন এটি ব্যবহার করবেন? */
useReducer স্টেট এবং অ্যাকশনভিত্তিক কন্ট্রোলের জন্য ব্যবহৃত হয়, যা জটিল স্টেট ম্যানেজমেন্টে সহায়ক।

/* Custom Hooks কিভাবে তৈরি এবং ব্যবহার করবেন? */
যখন একাধিক কম্পোনেন্টে একই লজিক ব্যবহার করতে হবে, তখন Custom Hook তৈরি করা যায়।

উদাহরণ:

javascript

function useCustomHook() {
  const [state, setState] = useState();
  return [state, setState];
}










