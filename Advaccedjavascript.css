Advance JS Interview Question

ES6 (10 questions)

/* 1. **What are arrow functions in ES6, and how are they different from regular functions?** */
Arrow Functions: Arrow functions provide a shorter syntax for writing functions and handle the this context differently than traditional functions. Regular functions have their own this context, while arrow functions inherit this from their parent scope. For example:

javascript

const add = (a, b) => a + b;




/* 2. **What is destructuring assignment in ES6, and how does it work with arrays and objects?** */
Destructuring Assignment: Destructuring lets you extract properties from objects or elements from arrays into variables with a clean syntax. With arrays, you can do:

javascript

const [first, second] = [1, 2];
console.log(first); // 1
With objects, you can do:

javascript

const person = { name: 'Alice', age: 25 };
const { name, age } = person;
console.log(name); // Alice



    /* - **Project**: Write a function that takes an object with properties and logs each property individually. */
    Project: Write a function to destructure an object and log each property:

    javascript
  
    function logProperties({ name, age }) {
        console.log(`Name: ${name}, Age: ${age}`);
    }
    logProperties({ name: 'Alice', age: 25 });




/* 3. **Explain `let`, `const`, and `var` keywords. When should you use each?** */

let, const, and var:

var is function-scoped and allows re-declaration within its scope.
let is block-scoped and does not allow re-declaration in the same scope.
const is block-scoped and used for variables that should not be reassigned. However, if const is used with an object or array, the contents can still be changed.




/* 4. **What is the `spread` operator, and how can it be used with arrays and objects?** */
The spread operator (...) in JavaScript is a powerful tool introduced in ES6 that allows for the expansion of elements in arrays or properties in objects, making it especially useful for combining or cloning them.

How the Spread Operator Works
With Arrays: The spread operator can expand elements in an array, making it simple to merge arrays, copy them, or pass individual elements to functions that expect separate arguments.

Example: Merging two arrays
javascript

const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const mergedArray = [...array1, ...array2];
console.log(mergedArray); // [1, 2, 3, 4, 5, 6]
With Objects: The spread operator can also be used to combine or clone objects by expanding properties, making it simple to combine or copy objects without altering the original ones.

Example: Merging two objects
javascript

const obj1 = { name: "Alice" };
const obj2 = { age: 25 };
const mergedObject = { ...obj1, ...obj2 };
console.log(mergedObject); // { name: "Alice", age: 25 }


    /* - **Project**: Merge two arrays using the spread operator. */
    Project: Merging Two Arrays
To merge two arrays using the spread operator:

javascript

const arr1 = ['a', 'b', 'c'];
const arr2 = ['d', 'e', 'f'];
const mergedArr = [...arr1, ...arr2];
console.log(mergedArr); // Output: ['a', 'b', 'c', 'd', 'e', 'f']
Benefits of the Spread Operator
Simplifies Array and Object Manipulation: Instead of looping or using concat(), you can quickly combine arrays or objects.
Immutability-Friendly: Helps create new arrays or objects without modifying the originals, which is useful for state management in libraries like React.
The spread operator thus streamlines code and improves readability, especially when working with data structures in modern JavaScript.




/* 5. **How does template literals work in ES6, and how does it make string interpolation easier?** */
Template Literals: Template literals simplify string concatenation and interpolation. They use backticks (`) and ${expression} syntax:

javascript

const name = 'Alice';
const greeting = `Hello, ${name}!`;
console.log(greeting); // Hello, Alice!



/* 6. **What are `default parameters` in ES6, and how do they improve function flexibility?** */
Default Parameters: Default parameters allow you to set default values for function parameters, enhancing flexibility:

javascript

function greet(name = 'Guest') {
    console.log(`Hello, ${name}`);
}
greet(); // Hello, Guest




/* 7. **Explain what `Map` and `Set` are in ES6 and how they differ from objects and arrays.** */
Map and Set:

Map is a collection of key-value pairs with keys of any type.
Set is a collection of unique values.



    /* - **Project**: Create a simple dictionary with `Map` to store key-value pairs. */
    Project: Creating a dictionary with Map:

javascript

const dictionary = new Map();
dictionary.set('hello', 'A greeting');
dictionary.set('world', 'The earth');
console.log(dictionary.get('hello')); // A greeting



/* 8. **What is the purpose of the `for...of` loop, and how is it different from `for...in`?** */
for...of vs. for...in:

for...of is used to iterate over iterable objects like arrays and strings.
for...in iterates over enumerable properties of an object.
javascript

const arr = [10, 20, 30];
for (const num of arr) {
    console.log(num); // 10, 20, 30
}




/* 9. **Explain the concept of `Promise` in JavaScript. How do you use `.then()` and `.catch()`?** */
Promises: Promises handle asynchronous operations. They use .then() for success and .catch() for errors.




    /* - **Project**: Create a promise that resolves after 2 seconds and logs a message. */
    Project: Create a promise that resolves after 2 seconds:

javascript

const delayedMessage = new Promise((resolve) => {
    setTimeout(() => resolve('Hello after 2 seconds'), 2000);
});

delayedMessage.then((msg) => console.log(msg));




/* 10. **What is async/await, and how does it work with Promises?** */
async/await: async/await syntax is used to handle promises in a more readable way. The await keyword pauses the function until the promise resolves:

javascript

async function greet() {
    const message = await delayedMessage;
    console.log(message);
}
greet(); // Hello after 2 seconds
Each of these features contributes to cleaner, more efficient, and more readable JavaScript code, especially when working with asynchronous logic, modular components, and complex data structures.










DOM (8 questions)

/* 1. **What is the DOM, and how does JavaScript interact with it?** */
The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page structure as a hierarchical tree of objects where each node is an object corresponding to a part of the document, such as elements, attributes, or text content. JavaScript interacts with the DOM to dynamically manipulate HTML content, styles, and events, enabling real-time updates and interactive experiences on a web page. For example, JavaScript can add new elements, change existing content, or attach event listeners to respond to user actions.




/* 2. **Explain how to select elements in the DOM using methods like `getElementById`, `querySelector`, and `querySelectorAll`.** */
Selecting Elements in the DOM
getElementById: Selects an element by its id attribute. It returns a single element.

javascript

const element = document.getElementById('myDiv');
querySelector: Selects the first matching element using CSS selectors. This method can select by class, id, tag, or attribute.

javascript

const element = document.querySelector('.myClass');
querySelectorAll: Selects all elements matching a CSS selector, returning a NodeList.

javascript

const elements = document.querySelectorAll('div');



    /* - **Project**: Create a webpage with a button that changes the color of a `div` when clicked. */
    Project Example
html

<!DOCTYPE html>
<html>
<head>
  <style>
    #myDiv { width: 100px; height: 100px; background-color: blue; }
  </style>
</head>
<body>
  <div id="myDiv"></div>
  <button id="colorButton">Change Color</button>
  <script>
    const div = document.getElementById('myDiv');
    const button = document.getElementById('colorButton');
    button.addEventListener('click', () => {
      div.style.backgroundColor = 'red';
    });
  </script>
</body>
</html>


/* 3. **How do event listeners work in JavaScript? Explain `addEventListener`.** */
How Event Listeners Work in JavaScript: addEventListener
Event listeners allow JavaScript to respond to user interactions. Using addEventListener, you can attach a function to be executed when an event occurs on an element. It can listen for many types of events, such as clicks, keypresses, and scroll events.

javascript

button.addEventListener('click', function() {
  console.log('Button clicked!');
});



/* 4. **What is event delegation, and why is it useful?** */
What is Event Delegation and Why is it Useful?
Event delegation allows you to manage events on multiple child elements through a single parent by listening for events on the parent and using logic to determine the specific child that triggered the event. This reduces the number of event listeners and enhances performance, especially in dynamic lists.



    /* - **Project**: Create a list where clicking on each list item logs its content. Use event delegation. */
    Project Example
    html
   
    <ul id="list">
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
    <script>
      const list = document.getElementById('list');
      list.addEventListener('click', (event) => {
        if (event.target.tagName === 'LI') {
          console.log(event.target.textContent);
        }
      });
    </script>


/* 5. **What is the difference between `innerHTML`, `textContent`, and `innerText`?** */
Difference between innerHTML, textContent, and innerText
innerHTML: Retrieves or sets HTML content inside an element. This includes tags and elements.
textContent: Retrieves or sets only the text content of an element and its children, ignoring HTML.
innerText: Similar to textContent, but it respects the element’s styling (e.g., it won’t retrieve hidden text).



/* 6. **Explain how you can manipulate CSS styles of an element using JavaScript.** */
Manipulating CSS Styles of an Element with JavaScript
JavaScript can modify CSS styles by accessing the style property of an element.

javascript

element.style.color = 'blue';
element.style.fontSize = '20px';




/* 7. **How do you traverse the DOM? Explain `parentNode`, `firstChild`, `lastChild`, etc.** */
DOM Traversal: parentNode, firstChild, lastChild, etc.
DOM traversal properties allow navigation between nodes:

parentNode: Gets the parent node of an element.
firstChild and lastChild: Access the first and last child nodes, respectively.
nextSibling and previousSibling: Access the next and previous sibling nodes.




/* 8. **What is the purpose of `preventDefault()` and `stopPropagation()` in event handling?** */
Purpose of preventDefault() and stopPropagation() in Event Handling
preventDefault(): Prevents the default behavior of an element, like preventing form submission.
stopPropagation(): Prevents an event from bubbling up or capturing down through the DOM hierarchy.



    /* - **Project**: Create a form that prevents submission and logs a message instead. */
    Project Example
html

<form id="myForm">
  <input type="text" placeholder="Enter text">
  <button type="submit">Submit</button>
</form>
<script>
  const form = document.getElementById('myForm');
  form.addEventListener('submit', (event) => {
    event.preventDefault();
    console.log('Form submission prevented!');
  });
</script>
These examples give a foundational understanding of manipulating and handling DOM elements using JavaScript for interactive web development.






BOM (8 questions)

/* 1. **What is the Browser Object Model (BOM) in JavaScript?** */
The Browser Object Model (BOM) provides access to the browser's window and various browser functions, enabling JavaScript to interact with the browser beyond the document content. It includes objects such as window, navigator, location, history, and screen, which offer tools for manipulating the browser, controlling sessions, and gathering information about the user's environment. For example, BOM allows opening/closing browser windows, checking the user’s location, or storing temporary data through localStorage and sessionStorage.




/* 2. **How does `window` differ from `document`?** */
window: Represents the entire browser window and is the global object in JavaScript. It includes methods, properties, and sub-objects such as document, localStorage, location, and navigator.
document: Represents the HTML document loaded in the browser. It provides access to the DOM (Document Object Model), allowing JavaScript to manipulate elements, text, and other content within the webpage.



/* 3. **Explain how `localStorage`, `sessionStorage`, and `cookies` work and their differences.** */
localStorage: Stores data with no expiration date, persisting even after the browser is closed. Ideal for storing user preferences or long-term data.

javascript

localStorage.setItem('theme', 'dark'); // Store
localStorage.getItem('theme'); // Retrieve
sessionStorage: Stores data for the duration of a page session. Data is cleared when the page session ends (e.g., when the tab is closed).

Cookies: Used for storing small pieces of data, often with an expiration date. Cookies are sent to the server with every HTTP request, making them useful for authentication but with more overhead than localStorage or sessionStorage.



    /* - **Project**: Store and retrieve /user preferences (like theme) using `localStorage`. */
    Project Example: Store and Retrieve User Preferences Using localStorage
javascript

// Save user preference
localStorage.setItem('theme', 'dark');

// Retrieve preference
const theme = localStorage.getItem('theme');
document.body.className = theme; // Apply the theme


/* 4. **What is the purpose of the `navigator` object, and what properties does it have?** */
Purpose of the navigator Object and Its Properties
The navigator object represents the user’s browser and provides information about the browser type, version, and other environment-related properties. Common properties include:

navigator.userAgent: Browser information string.
navigator.language: User’s language preference.
navigator.onLine: Boolean indicating if the user is online.
navigator.geolocation: Accesses geolocation data (with user permission).



/* 5. **How do `window.open` and `window.close` methods work in JavaScript?** */
window.open(url, name, specs): Opens a new browser window or tab. You can specify the URL, name of the window, and additional features like width, height, etc.
window.close(): Closes the current window. This can only close windows opened by JavaScript due to security reasons.



/* 6. **Explain how to get the viewport width and height of a browser window using JavaScript.** */
Getting the Viewport Width and Height of a Browser Window
To retrieve the width and height of the viewport:

javascript

const width = window.innerWidth;
const height = window.innerHeight;


    /* - **Project**: Create a function that logs the window’s size whenever it’s resized. */
    Project Example: Log the Window’s Size on Resize
javascript

window.addEventListener('resize', () => {
  console.log(`Width: ${window.innerWidth}, Height: ${window.innerHeight}`);
});



/* 7. **What is the purpose of the `setTimeout` and `setInterval` functions?** */
Purpose of setTimeout and setInterval
setTimeout: Delays the execution of a function for a specified number of milliseconds.
javascript

setTimeout(() => { console.log("Hello, World!"); }, 1000); // Runs after 1 second
setInterval: Repeatedly executes a function at specified intervals (in milliseconds) until canceled.



    /* - **Project**: Create a clock that updates every second using `setInterval`. */
    Project Example: Create a Clock with setInterval
javascript

setInterval(() => {
  const now = new Date();
  console.log(now.toLocaleTimeString());
}, 1000); // Updates every second


/* 8. **How can you detect if a user is online or offline using the BOM?** */
Detecting if a User is Online or Offline Using the BOM
The navigator.onLine property allows checking if the user is connected to the internet. You can also add event listeners for 'online' and 'offline' events:

javascript

window.addEventListener('online', () => console.log('User is online'));
window.addEventListener('offline', () => console.log('User is offline'));
These tools from the BOM enable JavaScript to interact closely with the browser environment, providing additional functionality and enhancing the user experience.







Web API & JSON (10 questions)


/* 1. **What is the Fetch API, and how does it work with Promises?** */
The Fetch API is a modern JavaScript interface for making HTTP requests to servers. It returns a Promise that resolves to the Response object representing the entire HTTP response. This allows you to handle asynchronous code in a more readable way compared to XMLHttpRequest. Using fetch, you can make requests with a few simple steps and chain .then() methods to handle the response.



    /* - **Project**: Fetch data from a public API (e.g., JSONPlaceholder) and display it on the page. */
    Project Example: Fetch Data from JSONPlaceholder and Display on Page
javascript

fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => {
    data.forEach(post => {
      console.log(`Title: ${post.title}`);
    });
  })
  .catch(error => console.error('Error fetching data:', error));




/* 2. **How does `XMLHttpRequest` differ from the Fetch API?** */
Fetch API: Returns a Promise, providing a simpler and more readable way to handle asynchronous operations. It also supports streaming responses.
XMLHttpRequest: Older, more complex to use due to its callback-based approach and lack of Promise support. However, XMLHttpRequest has wider support in older browsers compared to the Fetch API.



/* 3. **Explain what JSON is and how it’s used in JavaScript.** */
Explain what JSON is and how it’s used in JavaScript.
JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy to read and write. JSON is commonly used to exchange data between a server and web applications. It consists of key-value pairs similar to JavaScript objects but is language-agnostic, making it ideal for sharing structured data across platforms.



/* 4. **How do you parse JSON data in JavaScript, and how do you stringify JavaScript objects?** */
Parsing JSON and Stringifying JavaScript Objects
Parsing: To convert JSON data into a JavaScript object, use JSON.parse().
Stringifying: To convert a JavaScript object into a JSON string, use JSON.stringify().



    /* - **Project**: Create a function that converts an object to JSON and back to an object. */
    Project Example: Convert an Object to JSON and Back
javascript

const obj = { name: "Alice", age: 25 };
const jsonStr = JSON.stringify(obj); // Convert to JSON
console.log(jsonStr);

const parsedObj = JSON.parse(jsonStr); // Convert back to object
console.log(parsedObj);


/* 5. **What is CORS, and why do we need it when making API requests?** */
CORS (Cross-Origin Resource Sharing) is a security feature that restricts web pages from making requests to a different domain than the one that served the web page. It’s implemented to prevent malicious sites from accessing sensitive data on another domain without permission. To enable CORS, servers must send specific HTTP headers to permit requests from external origins.



/* 6. **Explain how the `FormData` API works and when you’d use it.** */
The FormData API provides a way to construct key-value pairs representing form fields and their values. It’s particularly useful for sending form data in multipart/form-data format, which is ideal for file uploads.

javascript

const formData = new FormData();
formData.append('username', 'Alice');
formData.append('file', fileInput.files[0]);

fetch('/upload', {
  method: 'POST',
  body: formData,
});




/* 7. **What is the purpose of the `History` API, and how do `pushState` and `replaceState` work?** */
Purpose of the History API and How pushState and replaceState Work
The History API allows JavaScript to manage the browser’s history stack, enabling single-page applications (SPAs) to navigate without refreshing.

pushState: Adds a new state to the history stack.
replaceState: Replaces the current history entry with a new state, without adding a new entry.



    /* - **Project**: Create a simple single-page navigation system with `pushState`. */
    Project Example: Simple SPA with pushState
javascript

document.getElementById('page1').addEventListener('click', () => {
  history.pushState({ page: 1 }, 'Page 1', '/page1');
  document.body.innerHTML = '<h1>Page 1</h1>';
});

window.onpopstate = (event) => {
  document.body.innerHTML = `<h1>Page ${event.state.page}</h1>`;
};



/* 8. **How can you handle errors in API requests with `try/catch` blocks and the `.catch()` method?** */
Handling Errors in API Requests with try/catch and .catch()
To handle errors in asynchronous requests:

Use .catch() with Promises.
Use try/catch with async/await syntax for synchronous error handling.
javascript

async function fetchData() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error:', error);
  }
}



/* 9. **What are WebSockets, and how do they differ from HTTP requests?** */
WebSockets enable real-time, two-way communication between a client and server over a single persistent connection. Unlike HTTP requests, which are stateless and one-way, WebSockets maintain a continuous connection, ideal for applications like chat systems or live notifications.




/* 10. **Explain the basics of the Service Worker API and its use in creating progressive web apps (PWAs).** */
Basics of the Service Worker API and Its Use in Progressive Web Apps (PWAs)
The Service Worker API allows scripts to run in the background, independent of a web page, enabling offline functionality and caching. Service workers are essential for creating Progressive Web Apps (PWAs) by allowing features like offline browsing, background syncing, and push notifications.














